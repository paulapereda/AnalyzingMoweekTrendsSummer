source("~/Dropbox/AnalyzingMoweekTrends - LatinR 2023/src/0.0_extracting_vestimenta.R")
View(product_data)
url <- "https://moweek.com.uy"
html_content <- GET(url)
webpage <- read_html(content(html_content, as = "text"))
category_nodes <- html_nodes(webpage, ".expandedCategory")
category_urls <- lapply(category_nodes, function(node) html_nodes(node, "a") %>%
html_attr("href")) %>%
unlist() %>%
str_subset("/vestimenta/") %>%
str_replace_all("1", "5")
category_urls <- category_urls[(category_urls %in% c("/vestimenta/bodywear/5"))]
pacman::p_load(tidyverse, rvest, httr)
url <- "https://moweek.com.uy"
start_time <- Sys.time()
pacman::p_load(tidyverse, rvest, httr)
url <- "https://moweek.com.uy"
html_content <- GET(url)
webpage <- read_html(content(html_content, as = "text"))
category_nodes <- html_nodes(webpage, ".expandedCategory")
category_urls <- lapply(category_nodes, function(node) html_nodes(node, "a") %>%
html_attr("href")) %>%
unlist() %>%
str_subset("/vestimenta/") %>%
str_replace_all("1", "5")
category_urls <- lapply(category_nodes, function(node) html_nodes(node, "a") %>%
html_attr("href")) %>%
unlist() %>%
str_subset("/vestimenta/")
category_urls
category_urls <- category_urls[(category_urls %in% c("/vestimenta/bodywear/1"))]
product_data <- tibble()
for (url in category_urls) {
cat_url <- paste0("https://moweek.com.uy", url)
cat_content <- RETRY("GET", cat_url)
cat_page <- read_html(content(cat_content, as = "text"))
# Extract the category name and the subcategory name from the page title
cat_name <- html_text(html_node(cat_page, "title")) %>%
str_to_title() %>%
str_remove(" - Moweek - Encontr√° Lo Mejor De La Moda Local")
image_tags <- html_nodes(cat_page, ".productViewContainer")
for (tag in image_tags) {
skip_to_next <- FALSE
tryCatch({
# Extract product information from the image tag
name <- html_text(html_node(tag, ".productViewName"))
price <- html_text(html_node(tag, ".productViewPrice"))
product_url <- html_attr(tag, "href")
# Visit the product page and extract additional information
product_content <- RETRY("GET", paste0("https://moweek.com.uy", product_url))
product_page <- read_html(content(product_content, as = "text"))
brand <- html_text(html_node(product_page, ".productInfoTitle.brandName"))
characteristics <- html_text(html_node(product_page, "#cocardasContainer"))
img_url <- html_attr(html_node(product_page, ".navImgProduct"), "src")
sizes <- html_text(html_nodes(product_page, ".specGroupTitle:contains('Talle') + .specs"))
color <- html_text(html_nodes(product_page, ".specGroupTitle:contains('Color') + .specs"))
description <- html_text(html_node(product_page, ".productGroupInfo"))
# Combine all the information into a single row and add it to the product_data data frame
product_info <- tibble(name = name,
price = price,
brand = brand,
type = url,
category = cat_name,
characteristics = characteristics,
sizes = sizes,
colors = color,
description = description)
},
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
product_data <- product_data %>%
bind_rows(product_info)
}
}
View(product_data)
product_data_clean <- product_data %>%
transmute(name = str_trim(name),
price = str_trim(price),
bank_price = str_trim(price),
brand = str_trim(brand),
category = category,
characteristics = str_trim(characteristics),
sizes = str_trim(sizes),
colors = str_trim(colors),
description = str_trim(description),
image_URL, product_URL) %>%
mutate(price = as.numeric(str_replace_all(price, "[\\$\\s.]", "")),
bank_price = price*.75,
brand = str_remove(brand, "by \n                                "),
type = "Vestimenta")
product_data_clean <- product_data %>%
transmute(name = str_trim(name),
price = str_trim(price),
bank_price = str_trim(price),
brand = str_trim(brand),
category = category,
characteristics = str_trim(characteristics),
sizes = str_trim(sizes),
colors = str_trim(colors),
description = str_trim(description)) %>%
mutate(price = as.numeric(str_replace_all(price, "[\\$\\s.]", "")),
bank_price = price*.75,
brand = str_remove(brand, "by \n                                "),
type = "Vestimenta")
View(product_data_clean)
source("~/Dropbox/AnalyzingMoweekTrends - LatinR 2023/src_old/0.0_extracting_vestimenta.R")
View(product_data_clean)
product_clean_vestimenta_LAST <- readRDS("~/Dropbox/AnalyzingMoweekTrends/data-raw/product_clean_vestimenta_LAST.rds")
end_time - start_time
write_rds(product_data, "data-raw/product_vestimenta.rds")
write_rds(product_data_clean, "data-raw/product_clean_vestimenta_clean.rds")
write_rds(product_data, "data-raw/product_vestimenta.rds")
write_rds(product_data_clean, "data-raw/product_clean_vestimenta_clean.rds")
write_rds(product_data_clean, "data-raw/product_vestimenta_clean.rds")
install.packages("magick")
pacman::p_load(magick)
# List Folders and Files
## Specify the path to the main directory containing subdirectories with images
main_directory <- "images/"
## List all subdirectories
subdirectories <- list.dirs(main_directory, full.names = TRUE, recursive = TRUE)
subdirectories
# List Folders and Files
## Specify the path to the main directory containing subdirectories with images
main_directory <- "images"
## List all subdirectories
subdirectories <- list.dirs(main_directory, full.names = TRUE, recursive = TRUE)
subdirectories
## List image files in each subdirectory
image_files <- lapply(subdirectories, function(dir) {
list.files(dir, pattern = "\\.(jpg|png|jpeg|gif)$", full.names = TRUE)
})
View(image_files)
# Loop Through and Analyze Images
analyzed_colors <- list()  # To store the results for each folder
?image_colors
for (i in 1:length(image_files)) {
images <- lapply(image_files[[i]], image_read)
clusters <- lapply(images, function(image) {
image_colors(image, quantize = 3)  # Adjust quantize as needed
})
all_clusters <- do.call(rbind, clusters)
color_counts <- table(all_clusters)
sorted_colors <- sort(color_counts, decreasing = TRUE)
top_colors <- names(sorted_colors)[1:5]  # Replace with your desired number
analyzed_colors[[subdirectories[i]]] <- top_colors
}
# Load the magick package
library(magick)
# Function to extract dominant colors from an image
extract_dominant_colors <- function(image_path, num_clusters = 3) {
img <- image_read(image_path)
img <- image_scale(img, "300x300")  # Optional: Resize the image
img_matrix <- as.im(img, format = "rgb", type = "matrix")
kmeans_result <- kmeans(img_matrix, centers = num_clusters)
dominant_colors <- kmeans_result$centers
return(dominant_colors)
}
# Load the magick package
library(magick)
# Function to extract dominant colors from an image
extract_dominant_colors <- function(image_path, num_clusters = 3) {
img <- image_read(image_path)
img <- image_scale(img, "300x300")  # Optional: Resize the image
img_matrix <- as.im(img, format = "rgb", type = "matrix")
kmeans_result <- kmeans(img_matrix, centers = num_clusters)
dominant_colors <- kmeans_result$centers
return(dominant_colors)
}
# Function to analyze images in a folder
analyze_folder <- function(folder_path) {
image_files <- list.files(folder_path, pattern = "\\.(jpg|png|jpeg|gif)$", full.names = TRUE)
folder_colors <- list()
for (image_file in image_files) {
colors <- extract_dominant_colors(image_file, num_clusters = 3)  # Adjust num_clusters as needed
folder_colors[image_file] <- colors
}
return(folder_colors)
}
# Specify the path to the main directory containing subdirectories with images
main_directory <- "images"
# List all subdirectories within the "images" folder
subdirectories <- list.dirs(main_directory, full.names = TRUE, recursive = FALSE)
# Create a list to store results for each subdirectory
results <- list()
# Iterate over subdirectories and analyze images
for (subdirectory in subdirectories) {
folder_name <- basename(subdirectory)
folder_colors <- analyze_folder(subdirectory)
results[folder_name] <- folder_colors
}
# Load the magick package
library(magick)
# Function to extract dominant colors from an image
extract_dominant_colors <- function(image_path, num_clusters = 3) {
img <- image_read(image_path)
img <- image_scale(img, "300x300")  # Optional: Resize the image
img_data <- image_data(img)
img_matrix <- as.data.frame(img_data)
kmeans_result <- kmeans(img_matrix, centers = num_clusters)
dominant_colors <- kmeans_result$centers
return(dominant_colors)
}
# Function to analyze images in a folder
analyze_folder <- function(folder_path) {
image_files <- list.files(folder_path, pattern = "\\.(jpg|png|jpeg|gif)$", full.names = TRUE)
folder_colors <- list()
for (image_file in image_files) {
colors <- extract_dominant_colors(image_file, num_clusters = 3)  # Adjust num_clusters as needed
folder_colors[image_file] <- colors
}
return(folder_colors)
}
# Specify the path to the main directory containing subdirectories with images
main_directory <- "images"
# List all subdirectories within the "images" folder
subdirectories <- list.dirs(main_directory, full.names = TRUE, recursive = FALSE)
subdirectories
subdirectories <- subdirectories[(subdirectories %in% c("images/blusas-y-tops"))]
# Create a list to store results for each subdirectory
results <- list()
# Iterate over subdirectories and analyze images
for (subdirectory in subdirectories) {
folder_name <- basename(subdirectory)
folder_colors <- analyze_folder(subdirectory)
results[folder_name] <- folder_colors
}
# Load the magick package
library(magick)
# Function to extract dominant colors from an image
extract_dominant_colors <- function(image_path, num_clusters = 3) {
img <- tryCatch(
{
img <- image_read(image_path)
img <- image_scale(img, "300x300")  # Optional: Resize the image
img_data <- image_data(img)
img_matrix <- as.data.frame(img_data)
kmeans_result <- tryCatch(
{
kmeans(img_matrix, centers = num_clusters)
},
error = function(e) {
cat("Error in kmeans for image: ", image_path, "\n")
return(NULL)
}
)
if (is.null(kmeans_result)) {
return(NULL)
}
dominant_colors <- kmeans_result$centers
return(dominant_colors)
},
error = function(e) {
cat("Error reading image: ", image_path, "\n")
return(NULL)
}
)
return(img)
}
# Function to analyze images in a folder
analyze_folder <- function(folder_path) {
image_files <- list.files(folder_path, pattern = "\\.(jpg|png|jpeg|gif)$", full.names = TRUE)
folder_colors <- list()
for (image_file in image_files) {
colors <- extract_dominant_colors(image_file, num_clusters = 3)  # Adjust num_clusters as needed
if (!is.null(colors)) {
folder_colors[image_file] <- colors
}
}
return(folder_colors)
}
# Specify the path to the main directory containing subdirectories with images
main_directory <- "images"
# List all subdirectories within the "images" folder
subdirectories <- list.dirs(main_directory, full.names = TRUE, recursive = FALSE)
subdirectories <- subdirectories[(subdirectories %in% c("images/blusas-y-tops"))]
# Create a list to store results for each subdirectory
results <- list()
# Iterate over subdirectories and analyze images
for (subdirectory in subdirectories) {
folder_name <- basename(subdirectory)
folder_colors <- analyze_folder(subdirectory)
results[folder_name] <- folder_colors
}
install.packages("imager")
library(imager)
devtools::install_github("asgr/imager")
install.packages("devtools")
library(devtools)
devtools::install_github("asgr/imager")
devtools::install_github("asgr/imager")
source("~/Dropbox/AnalyzingMoweekTrends - LatinR 2023/src/00_extract_images_by_category.R")
# Load the 'fs' package for file system operations
library(fs)
# Function to rename files with a specific extension in a directory and its subdirectories
rename_files_in_directory <- function(directory_path, old_extension, new_extension) {
# List all files and directories in the current directory
dir_contents <- list.files(directory_path, full.names = TRUE)
# Loop through each item in the directory
for (item in dir_contents) {
if (file.info(item)$isdir) {
# If the item is a subdirectory, recursively call the function
rename_files_in_directory(item, old_extension, new_extension)
} else if (grepl(paste0(old_extension), item)) {
# If the item is a file with the old extension, rename it
new_name <- gsub(paste0(old_extension), paste0(new_extension), item)
file.rename(item, new_name)
}
}
}
# Specify the root directory where you want to start the renaming
root_directory <- "images"
old_extension <- ".jpg"  # Change this to the old file extension
new_extension <- ".jpeg"  # New file extension
# Call the function to rename files in the root directory and its subdirectories
rename_files_in_directory(root_directory, old_extension, new_extension)
old_extension <- ".png"  # Change this to the old file extension
new_extension <- ".jpeg"  # New file extension
# Call the function to rename files in the root directory and its subdirectories
rename_files_in_directory(root_directory, old_extension, new_extension)
pacman::p_load(tidyverse, rPlotter, dichromat, EBImage)
# Function to process a subfolder and extract colors for all images
process_subfolder <- function(subfolder_path, num_col = 5, main_folder) {
image_files <- list.files(subfolder_path, full.names = TRUE, pattern = "\\.(jpg|jpeg|png|gif)$", recursive = TRUE)
if (length(image_files) == 0) {
return(NULL)
}
colors_data <- data.frame(Subfolder = character(0), Colors = character(0))
for (image_file in image_files) {
colors <- extract_colours(image_file, num_col)
colors_data <- rbind(colors_data, data.frame(Subfolder = subfolder_path, Colors = paste(colors, collapse = ", ")))
}
# Check if the subfolder is not the same as the main folder
if (subfolder_path != main_folder) {
return(colors_data)
} else {
return(NULL)
}
}
# Main function to process all subfolders
process_main_folder <- function(main_folder, num_col = 5) {
subfolder_paths <- list.dirs(main_folder, full.names = TRUE, recursive = TRUE)
all_colors_data <- data.frame(Subfolder = character(0), Colors = character(0))
for (subfolder_path in subfolder_paths) {
subfolder_colors_data <- process_subfolder(subfolder_path, num_col, main_folder)
if (!is.null(subfolder_colors_data)) {
all_colors_data <- rbind(all_colors_data, subfolder_colors_data)
}
}
return(all_colors_data)
}
main_folder <- "images"
result <- process_main_folder(main_folder) %>%
separate(Colors, into = c("Color1", "Color2", "Color3", "Color4", "Color5"), sep = ", ")
source("~/Dropbox/AnalyzingMoweekTrends - LatinR 2023/src/changing_extension.R")
source("~/Dropbox/AnalyzingMoweekTrends - LatinR 2023/src/02_extracting colors.R")
